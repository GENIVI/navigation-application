#! /bin/bash
###########################################################################
# @licence app begin@
# SPDX-License-Identifier: MPL-2.0
#
# \copyright Copyright (C) 2013-2014, PCA Peugeot Citroen
#
# \file run
#
# \brief This file is part of the Build System.
#
# \author # Author: Martin Schaller <martin.schaller@it-schaller.de>
#
# \version 1.0
#
# This Source Code Form is subject to the terms of the
# Mozilla Public License (MPL), v. 2.0.
# If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# For further information see http://www.genivi.org/.
#
# List of changes:
# 
# 5-8-2014, Philippe Colliot, Refine, add a sleep and improve comments
# 30-9-2014, Philippe Colliot, Make it simpler and add a check for availability of hmi style-sheets
#
# @licence end@
###########################################################################

TOP_DIR=$PWD/..
TOP_BIN_DIR=$TOP_DIR/../bin
SCRIPT_DIR=$PWD


#include common settings
source fsa-config.sh

# function to start a process by freezing some of the options
function run
{
	local x=$xterm
	local g=$gdb
	local l=$log
	local title="$1"
	shift
	if [ "$1" = "-n" ]
	then
		shift
		x=0
		log=0
	fi
	if [ "$1" = -"g" ]
	then
		shift
		g=0
	fi
	if [ "$x" = 1 ]
	then
		if [ "$g" = 1 ]
		then
			set -- gdb -ex run --args "$@"
		fi
		xterm -T "$title" -sb -sl 5000 -e "$@" &
	elif [ "$log" = 1 ]
	then
		"$@" >"$CUR_DIR/$title.log" 2>&1 &
	else
		"$@" &
	fi
	PIDS="$PIDS $!"
}

# function to wait for the dbus service to be started, exit if too long
function wait_for_service
{
	for i in $(seq 1 50)
	do
		if dbus-send --dest=$1 $2 org.freedesktop.DBus.Introspectable.Introspect
		then
			return
		fi
		echo "Waiting for $1"
		sleep 0.1
	done
	exit 1
}

# function to catch the ctrl C or exit and to stop cleanly
function terminate
{
	set +e
	trap "" EXIT INT
	kill $PIDS 2>/dev/null
	if [ "$gdb" = 1 ]
	then
		kill $PIDS 2>/dev/null
	fi
	if [ -n "$wm" ]
	then
		sleep 2
		cd
		nohup $wm >/dev/null 2>/dev/null &
	fi
}

# default settings
gdb=0 #no debug
xterm=0 #no subprocess into a separate xterm
log=0 #no log file 
enhpos=1 #enhanced position server enabled 
replayer=1 #replayer enabled
lm=0 #layer manager disabled
wm="" #to store the current window manager (in case of start with the layer manager)
verbose=0 #no debug or log messages
center="4612 N 0608 E"

# hmi panel launched
app=$HMI_QML_DIR/application.qml

while getopts a:c:glnorvx opt
do
	case $opt in
	a) #select another hmi panel
		app=$OPTARG 
		;;
	c) #set the map center 
		case "$OPTARG" in
		paris)
			center="2.34 48.86"
			;;
		tokyo)
			center="139.74 35.70"
			;;
		[0-9-]*)
			center=$OPTARG
			;;
		*)
			echo "Unsupported center $OPTARG" >&2
			exit 1
			;;
		esac
		;;
	g) #enable the debugger
		gdb=1
		;;
	l) #enable the layer manager
		lm=1
		;;
	n) #disable the enhanced position server 
		enhpos=0
		;;
	o) #enable the log file
		log=1
		;;
	r) #disable the log replayer
		replayer=0
		;;
	v) #enable log messages
		verbose=1
		;;
	x) #enable subprocess in a separate xterm
		xterm=1
		;;
	\?)
		echo "Usage:"
		echo "$0 [-a application][-c center][-glnoprx]"
		echo "-a: Set application (default application.qml)"
		echo "-c: Set center (supported values: paris,tokyo,longitude latitude). Default is geneve"
		echo "-g: Run subprocesses within gdb (only with -x)"
		echo "-l: Use layermanager"
		echo "-n: Don't start enhanced positioning service"
		echo "-o: Create log file of subprocess output"
		echo "-r: Don't start replayer"
		echo "-v: Enable the output of log or debug messages"
		echo "-x: Run subprocesses in own xterm to get separated log messages (doesn't make sense with -l)"
		exit 1
	esac
done

# check if style sheets have been generated
if [ ! -f $STYLE_SHEETS_GENERATED_INDICATOR ]
then
    echo "Please generate the style sheets before"
	./prepare.sh -h
	exit 1
fi

REPLAYER_LOG_FILE=none
export REPLAYER_LOG_FILE

# initialization for the layer manager 
if [ "$lm" = "1" ]
then
	# D-Bus setup
	#eval `dbus-launch --sh-syntax`
	export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/5000/dbus/user_bus_socket
	#export DBUS_SESSION_BUS_PID=335
	#export DBUS_SESSION_BUS_PID=185

	export XDG_RUNTIME_DIR=/var/run/user/5000

	# Platform is wayland of drm-backend
	export QT_QPA_PLATFORM=wayland

	# Create Window OpenGL (Default gtk_drawing_area)
	export NAVIT_GRAPHICS=opengl

	# Graphics OpneGL Platfrom
	export NAVIT_PLATFORM=wayland

	# ILM library path(for hmi-launcher& genivi_mapviewer_mapviewercontrol.cxx)
	#export LD_LIBRARY_PATH=/home/user/usrfs/lib:$LD_LIBRARY_PATH

	# Create Layer(layer of navigation-application)
	#export PATH=/home/user/usrfs/bin:$PATH
	LAYER=2000
	LayerManagerControl create layer $LAYER 800 480
	LayerManagerControl set layer $LAYER source region 0 0 800 480
	LayerManagerControl set layer $LAYER destination region 0 0 800 480
	LayerManagerControl set layer $LAYER visibility 1
	LayerManagerControl set screen 0 render order $LAYER
fi

export | egrep " LM_PLUGIN_PATH=|LM_USE_SESSION_BUS=| DBUS_SESSION_BUS_ADDRESS=| LD_LIBRARY_PATH=| PATH=| DISPLAY=" >env.sh

trap "terminate" EXIT INT
set -e #exit on error now

# start the automotive message broker and wait for dbus service
cd $AUTOMOTIVE_MESSAGE_BROKER_BIN_DIR
run "Automotive Message Broker" ./ambd/ambd > /dev/null 2>&1 --config $GENIVI_LOGREPLAYER_SRC_DIR/logreplayerconfig
wait_for_service org.automotive.message.broker /

# start the poi server and wait for dbus service
run "POI service" $POI_SERVER_BIN_DIR/$POI_SERVER -f $SCRIPT_DIR/empty.db
wait_for_service org.genivi.poiservice.POISearch /org/genivi/poiservice/POISearch

if [ "$enhpos" = 1 ]
then # start the  enhanced position service
	run "EnhancedPositionService" $ENHANCED_POSITION_SERVICE_BIN_DIR/src/$ENHANCED_POSITION_SERVICE 
	wait_for_service org.genivi.positioning.EnhancedPosition /org/genivi/positioning/EnhancedPosition
fi

# start the two instances of navit with plugins (one for navigation core and another one for map viewer)
cd $NAVIT_BIN_DIR
>bookmark.txt
echo "$center" >center.txt
run "MapViewer" ./$NAVIT navit_genivi_mapviewer.xml

wait_for_service org.genivi.mapviewer.Configuration /org/genivi/mapviewer
wait_for_service org.genivi.mapviewer.MapViewerControl /org/genivi/mapviewer
wait_for_service org.genivi.mapviewer.Session /org/genivi/mapviewer

run "NavigationCore" ./$NAVIT navit_genivi_navigationcore.xml
wait_for_service org.genivi.navigationcore.Configuration /org/genivi/navigationcore
wait_for_service org.genivi.navigationcore.Guidance /org/genivi/navigationcore
wait_for_service org.genivi.navigationcore.LocationInput /org/genivi/navigationcore
wait_for_service org.genivi.navigationcore.MapMatchedPosition /org/genivi/navigationcore
wait_for_service org.genivi.navigationcore.Routing /org/genivi/navigationcore
wait_for_service org.genivi.navigationcore.Session /org/genivi/navigationcore

if [ "$replayer" = 1 ]
then # start the log replayer (of the fsa)
	run "Log Replayer" $LOG_REPLAYER_BIN_DIR/$LOG_REPLAYER > /dev/null 2>&1 $POSITIONING_LOG_REPLAYER_SRC_DIR/logs/geneve-cologny.log
fi

sleep 3 # need a sleep here (to be improved)
# start the fuel stop advisor application
run "Fuel Stop Advisor" $FUEL_STOP_ADVISOR_BIN_DIR/$FUEL_STOP_ADVISOR

# log trace into a file
if [ "$log" = 1 ]
then
	exec >$CUR_DIR/fsa.log
	exec 2>&1
fi

if [ "$lm" = 1 ]
then # start the hmi into the layer manager
	# wait for launch hmi-launcher
	sleep 5
	#SURFACE=`pgrep -f hmi-launcher`
	SURFACE=2002
	if [ -n $SURFACE ]; then
		LayerManagerControl set surface $SURFACE visibility 1
		LayerManagerControl set layer $LAYER render order $SURFACE
	fi
else # start the hmi 
	$HMI_LAUNCHER_BIN_DIR/$HMI_LAUNCHER $app 
fi

