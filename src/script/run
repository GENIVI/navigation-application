#! /bin/bash
###########################################################################
# @licence app begin@
# SPDX-License-Identifier: MPL-2.0
#
# \copyright Copyright (C) 2013-2014, PCA Peugeot Citroen
#
# \file run
#
# \brief This file is part of the Build System.
#
# \author # Author: Martin Schaller <martin.schaller@it-schaller.de>
#
# \version 1.0
#
# This Source Code Form is subject to the terms of the
# Mozilla Public License (MPL), v. 2.0.
# If a copy of the MPL was not distributed with this file,
# You can obtain one at http://mozilla.org/MPL/2.0/.
#
# For further information see http://www.genivi.org/.
#
# List of changes:
# 
# 5-8-2014, Philippe Colliot, Refine, add a sleep and improve comments
#
# @licence end@
###########################################################################

# function to start a process by managing the options
function run
{
	local x=$xterm
	local g=$gdb
	local l=$log
	local title="$1"
	shift
	if [ "$1" = "-n" ]
	then
		shift
		x=0
		l=0
	fi
	if [ "$1" = "-g" ]
	then
		shift
		g=0
	fi
	if [ "$x" = 1 ]
	then
		if [ "$g" = 1 ]
		then
			set -- gdb -ex run --args "$@"
		fi
		xterm -T "$title" -sb -sl 5000 -e "$@" &
	elif [ "$l" = 1 ]
	then
		"$@" >"$CUR_DIR/$title.log" 2>&1 &
	else
		"$@" &
	fi
	PIDS="$PIDS $!" #add pid to list of pid
}

# function to wait for the dbus service to be started, exit if too long
function wait_for_service
{
	for i in $(seq 1 50)
	do
		if dbus-send --dest=$1 $2 org.freedesktop.DBus.Introspectable.Introspect
		then
			return
		fi
		echo "Waiting for $1"
		sleep 0.1
	done
	exit 1
}

# function to catch the ctrl C or exit and to stop cleanly
function terminate
{
	set +e
	trap "" EXIT INT
	kill $PIDS 2>/dev/null
	if [ "$gdb" = 1 ]
	then
		kill $PIDS 2>/dev/null
	fi
	if [ -n "$wm" ]
	then
		sleep 2
		cd
		nohup $wm >/dev/null 2>/dev/null &
	fi
}

# paths
CUR_DIR=$PWD
BIN_DIR=$PWD/../../bin
SRC_DIR=$PWD/..

# default settings
gdb=0 #no debug
xterm=0 #no subprocess into a separate xterm
log=0 #no log file 
enhpos=1 #enhanced position server enabled 
replayer=1 #replayer enabled
lm=0 #layer manager disabled
wm="" #to store the current window manager (in case of start with the layer manager)

# hmi panel launched
app=$SRC_DIR/hmi/qml/application.qml

while getopts a:c:glnorx opt
do
	case $opt in
	a) #select another hmi panel
		app=$OPTARG 
		;;
	c) #set the map center (used by the navigation core run script)
		plugin_args="$plugin_args -$opt $OPTARG" 
		;;
	g) #enable the debugger
		plugin_args="$plugin_args -$opt"
		gdb=1
		;;
	l) #enable the layer manager (not running)
		lm=1
		;;
	n) #disable the enhanced position server (used by the navigation core run script)
		enhpos=0
		plugin_args="$plugin_args -$opt"
		;;
	o) #enable the log file
		plugin_args="$plugin_args -$opt"
		log=1
		;;
	r) #disable the log replayer
		replayer=0
		;;
	x) #enable subprocess in a separate xterm
		plugin_args="$plugin_args -$opt"
		xterm=1
		;;
	\?)
		echo "Usage:"
		echo "$0 [-a application][-c center][-glnoprx]"
		echo "-a: Set application (default application.qml)"
		echo "-c: Set center (supported values: paris,tokyo,longitude latitude). Default is geneve"
		echo "-g: Run subprocesses within gdb (only with -x)"
		echo "-l: Use layermanager"
		echo "-n: Don't start enhanced positioning service"
		echo "-o: Create log file of subprocess output"
		echo "-r: Don't start replayer"
		echo "-x: Run subprocesses in own xterm to get separated log messages (doesn't make sense with -l)"
		exit 1
	esac
done

REPLAYER_LOG_FILE=none
export REPLAYER_LOG_FILE

# manage the layer manager (not running)
if [ "$lm" = "1" ]
then
	for i in metacity compiz
	do
		if pidof $i
		then
			killall $i
			while pidof $i
			do
				echo "Waiting for termination of $i"
				sleep 1
			done
			wm="$i"
			break
		fi
	done
	set -e
	export LM_USE_SESSION_BUS=enable
	PATH=$PWD/../bin/layer_management/inst/usr/local/bin:$PWD/../bin/libqtlayerman/lmqmlviewer:$PATH
	export LD_LIBRARY_PATH=$PWD/../bin/layer_management/inst/usr/local/lib:$PWD/../bin/libqtlayerman/src
	export LM_PLUGIN_PATH=$PWD/../bin/layer_management/inst/usr/local/lib/layermanager
	LayerManagerService  &
	lm_pid=$!
	sleep 2
fi

export | egrep " LM_PLUGIN_PATH=|LM_USE_SESSION_BUS=| DBUS_SESSION_BUS_ADDRESS=| LD_LIBRARY_PATH=| PATH=| DISPLAY=" >env.sh

trap "terminate" EXIT INT
set -e #exit on error now

# start the automotive message broker and wait for dbus service
cd $BIN_DIR/automotive-message-broker
run "Automotive Message Broker" ./ambd/ambd --config $SRC_DIR/genivilogreplayer/logreplayerconfig
wait_for_service org.automotive.message.broker /

# start the poi service and wait for dbus service
cd $BIN_DIR/poi-service
run "POI service" ./poi-server -f empty.db
wait_for_service org.genivi.poiservice.POISearch /org/genivi/poiservice/POISearch

# start the two instances of navit with plugins (one for navigation core and another one for map viewer)
# we don't use the log replayer of positioning because we still need some specific data for the FSA application !
cd $SRC_DIR/navigation-service*/src/navigation/script
if [ "$enhpos" = 1 ]
then # start the enhanced position server
	run "Navit Plugins" ./run -r -b $BIN_DIR $plugin_args
	if [ "$replayer" = 1 ]
	then # start the log replayer
		cd $BIN_DIR/log-replayer
		run "Log Replayer" ./log-replayer $SRC_DIR/positioning_*/log-replayer/logs/geneve-cologny.log
	fi
else # no enhanced position server
	run "Navit Plugins" ./run -rn -b $BIN_DIR $plugin_args
fi

sleep 2 # need a sleep here (to be improved)
# start the fuel stop advisor application
run "Fuel Stop Advisor" $BIN_DIR/fuel-stop-advisor/fuel-stop-advisor

# log trace into a file
if [ "$log" = 1 ]
then
	exec >$CUR_DIR/fsa.log
	exec 2>&1
fi

cd $BIN_DIR/hmi/qml
if [ "$lm" = 1 ]
then # start the hmi into the layer manager (not running)
	lmqmlviewer $app
else # start the hmi with the launcher
	./hmi-launcher $app 
fi

