<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN" "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<?xml-stylesheet type="text/xsl" href="introspect.xsl"?>

<node name="/org/genivi/demonstrator/TripComputer" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="introspect.xsd">

  <interface name="org.genivi.demonstrator.TripComputer">
    <version>beta (29-11-2013)</version>
    <doc>
      <line>TripComputer = This interface offers functionalities to retrieve the trip computer values of the vehicle</line>
      <line>This interface is defined for the demonstrator and not included into the GENIVI compliance</line>
    </doc>

    <method name="GetVersion">
      <doc>
        <line>GetVersion = This method returns the API version implemented by the server application</line>
      </doc>
      <arg name="version" type="(qqqs)" direction="out">
        <doc>
          <line>version = struct(major,minor,micro,date)</line>
          <line>major = when the major changes, then backward compatibility with previous releases is not granted</line>
          <line>minor = when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added)</line> 
          <line>micro = when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications)</line> 
          <line>date = release date (e.g. 21-06-2011)</line>
        </doc>
      </arg>
    </method>

    <method name="SetUnits">
      <doc>
        <line>SetUnits = This method sets the calculation unit for given value</line>
      </doc>

      <arg name="data" type="a{qq}" direction="in">
        <doc>
          <line>data = dictionary[key,value]</line>
          <line>dictionary = array of tuples (key,value)</line>
          <line>Invalid data is not be returned to the client application</line>
          <line>key = enum(INVALID,ODOMETER,FUEL_LEVEL,INSTANT_FUEL_CONSUMPTION,DISTANCE,AVERAGE_FUEL_CONSUMPTION,AVERAGE_SPEED,TANK_DISTANCE,...,ALL)</line>
          <line>for each key, the value of type 'q' expresses the unit used, METRIC or NON_METRIC</line>
          <line>see details for each key into the getters</line>
        </doc>
      </arg>
    </method>
    
    <method name="GetInstantData">
      <doc>
        <line>GetData = This method returns a given set of instant (not related to a trip number) trip computer data (e.g. odometer, fuel level... )</line>
      </doc>

      <arg name="data" type="a{qv}" direction="out">
        <doc>
          <line>data = dictionary[key,value]</line>
          <line>dictionary = array of tuples (key,value)</line>
          <line>Invalid data is not be returned to the client application</line>
          <line>key = enum(INVALID,ODOMETER,FUEL_LEVEL,INSTANT_FUEL_CONSUMPTION,...,ALL)</line>
          <line>key = ODOMETER, value = value of type 'u', that expresses the total distance counter in METRIC->tenth of kilometers NON_METRIC->tenth of miles</line>
          <line>key = FUEL_LEVEL, value = value of type 'q', that expresses fuel level in METRIC->tenth of liters NON_METRIC->hundreth of gallon</line>
          <line>key = INSTANT_FUEL_CONSUMPTION, value = value of type 'q', that expresses the instant fuel consumption in METRIC->tenth of liters per 100 kilometers NON_METRIC->miles per gallon</line>
        </doc>
      </arg>
    </method>

    <method name="GetSupportedTripNumbers">
      <doc>
        <line>GetSupportedTripNumbers = This method returns the number of supported trips</line>
      </doc>

      <arg name="tripNumbers" type="y" direction="out">
        <doc>
          <line>tripNumbers = value of 'y'</line>
       </doc>
      </arg>
    </method>

    <method name="GetTripData">
      <doc>
        <line>GetTripData = This method returns the data of a given trip number</line>
      </doc>

      <arg name="number" type="y" direction="in">
        <doc>
          <line>number= value of type 'y' that expresses the trip number (start number is 0)</line>
        </doc>
      </arg>

      <arg name="tripData" type="a{qv}" direction="out">
        <doc>
          <line>data = dictionary[key,value]</line>
          <line>dictionary = array of tuples (key,value)</line>
          <line>Invalid data is not be returned to the client application</line>
          <line>key = enum(INVALID,DISTANCE,TIME,AVERAGE_FUEL_CONSUMPTION,AVERAGE_SPEED,TANK_DISTANCE,...,ALL)</line>
          <line>key = DISTANCE, value = value of type 'q', that expresses the distance since the last reset of the trip computer in METRIC->tenth of kilometers NON_METRIC->tenth of miles (overflow at 65536) </line>  
          <line>key = TIME, value = value of type 'u', that expresses the elapsed time since the last reset of the trip computer in seconds</line>
          <line>key = AVERAGE_FUEL_CONSUMPTION, value = value of type 'q', that expresses the average fuel consumption since the last reset of the trip computer in METRIC->tenth of liters per 100 kilometers NON_METRIC->miles per gallon</line>
          <line>key = AVERAGE_SPEED, value = value of type 'q', that expresses the average speed since the last reset of the trip computer in METRIC->tenth of kilometers per hour NON_METRIC->tenth of miles per hour</line>
          <line>key = TANK_DISTANCE, value = value of type 'q', that expresses the tank distance since the last reset of the trip computer in METRIC->kilometers NON_METRIC->miles</line>
       </doc>
      </arg>
    </method>

    <method name="ResetTripData">
      <doc>
        <line>ResetTripData = This method resets the data of a given trip</line>
      </doc>
      <arg name="number" type="y" direction="in">
        <doc>
          <line>number= value of type 'y' that expresses the trip number</line>
        </doc>
      </arg>
    </method>

    <signal name="TripDataResetted">
      <doc>
        <line>TripDataReset = This signal is emitted to notifiy a client application that the data of the given trip number has been resetted</line>
      </doc>
      <arg name="number" type="y">
        <doc>
          <line>number= value of type 'y' that expresses the trip number</line>
        </doc>
      </arg>
    </signal>

  </interface>

</node>
