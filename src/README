Release date of the file: 05-11-2015 
Status: OK

Project:
Navigation application based on Navit and compliant with the Navigation APIs standardized by the GENIVI Alliance
This project is one of the navigation projects that implements the GENIVI navigation APIs.

More:
The GENIVI APIs are implemented into Navit plugins, running on DBus. The HMI is made in Qml (Qt5.2.1 and QtQuick 2.1)
See also other navigation projects like proof of concepts implemented for poi-service, traffic-info and positioning 

What is in:
This repository contains the application (with the HMI) of the navigation project
It's possible to build and run the whole stuff (including the navit and the plugins) directly from this repository
FYI: the scripts for building Navit and the GENIVI plugins are located into http://git.projects.genivi.org/lbs/navigation-service.git
	 this repository is cloned during the build

Author: 
Philippe Colliot philippe.colliot@mpsa.com
Martin Schaller <martin.schaller@it-schaller.de>

License: 
See headers and LICENSE file

===============================
Tested target and nota bene
===============================
Ubuntu 14.04 LTS 32 bits on Qt 5.2.1 gcc 32bit

Ubuntu 15.10 64 bits on Qt 5.4 gcc 64bit
For Qt version >= 5.2 with gcc 64 bits, there's an issue that needs to be fixed by compiling your code with -fPIC (-fPIE is not enough) 
You must build your code with position independent code if Qt was built with -reduce-relocations
For Qt version 5.4, it's needed to fix Qt 5.4 QML -> C++ QVariant issues by unboxing the QVariant-QJSValue


===============================
Current versions of additional code 
===============================
Navigation middleware:
<current version of navigation> (git): 79c9942e550e855b810f9128520c4f2571f6f44d

Additional code coming with navigation:
<current version of positioning> (git): 8bcb5aee2172bf1672b4402a2dbae480d5fbdc25
<current version of navit> (svn): 6135

Automotive message broker:
<current version of amb> (git): c216955d16ca275159891cad296217094d972390

===============================
How to get additional code 
===============================
NB: automotive message broker is added by the cmake process

Get navigation:
git clone http://git.projects.genivi.org/lbs/navigation.git ./navigation
cd navigation
git checkout <current version of navigation>

Go to the folder that contains the sources
cd src/navigation

NB: the following explanations are also included into the README under this folder

Get positioning:
git clone http://git.projects.genivi.org/lbs/positioning.git ./positioning
cd positioning
git checkout <current version of positioning>
cd ../

Get navit:
svn checkout http://svn.code.sf.net/p/navit/code/trunk navit -r<current version of navit>

Now apply a patch to navit (The r5549 removed the  get_unique features used by GetSpell):
cd navit
patch -p0 -i ../patches/search_list_get_unique.diff
cd ../

Get the sample map:
wget -O ./map/switzerland.bin.tmp http://www.navit-project.org/switzerland.bin
mv ./map/switzerland.bin.tmp ./map/switzerland.bin
cd ../../../

===============================
Directory Structure
===============================
navigation/map-viewer/
the plugins for the map rendering and manipulation (zoom, scroll..)
navigation/navigation-core/
the plugins for basic navigation features (location input, route calculation...)
navigation/poi-cam/
the plugins for poi content access module 
navigation/patches/
some patches to complete the navit code
navigation/map/
the map
navigation/navit/
basic code of navit
navigation/positioning/
the code of positioning
hmi/
the hmi in Qml
genivilogreplayer/
the plugin for amb that connects the logreplayer data (by using socket)
fuel-stop-advisor/
the code of the FSA application
automotive-message-broker/
the code of amb
script/
some scripts to build the hmi skins

===============================
How To Build
===============================
(you're supposed to have got additional code before)
NB: potential issue may occur due to path change of freetype stuff. If necessary, add a link to /usr/include/freetype2/ into /usr/include 

Prerequisite:

Configure Qt version:
	export QT_SELECT=5
To check it:
	qtchooser --print-env

Set language for the address list:
	export LANGUAGE=en_US

Create and enter the build folder:
mkdir ./build
cd build

1. Build the additional code for navigation:

Build the navit code first (to be improved)
mkdir navigation
cd navigation
mkdir navit
cd navit
mkdir navit
cd navit
cmake -DDISABLE_QT=1 -DSAMPLE_MAP=0 -Dvehicle/null=1 -Dgraphics/qt_qpainter=0 ../../../../navigation/src/navigation/navit/navit/
make
cd ../../
cmake ../../navigation/src/navigation
make
cd ..

2. Build the code of the FSA

NB: AMB has install step, so you may be asked for sudo during make
NB: a patch is applied by default to run amb on dbus session, not to apply it, add -DAMB_ON_DBUS_SESSION=OFF

cmake ../
make
cd ../

===============================
How To Prepare the HMI
===============================
There are two resolutions available, WVGA and XGA.
For instance, for VGA:
cd script
./prepare.sh -i ../hmi/qml/Core/gimp/green-theme/800x480
cd ../

===============================
How To Run
===============================

Launch in loop mode:
	./run

For the full FSA demonstration, please see $WORKING-DIR/test/script/README

You can get information about the various options available with
	./run --help

Options include running each process within its own terminal (or within gdb), creating log files, or disabling logreplayer or positioning from starting.

===============================
How To for CommonAPI
===============================
(experimental)

Build the code of the FSA with CommonAPI:

NB: You need CommonAPI 3.1.2 and Franca 0.9.1 installed 
If the CommonAPI stuff has been generated into /usr/local/
Check if the links are well set into ./lib
ln -s libCommonAPI-DBus.so.3.1.2 libCommonAPI-DBus.so.3
ln -s libCommonAPI.so.3.1.2 libCommonAPI.so.3
The folder ./include/CommonAPI-3.1/CommonAPI must contain 3.1.2 includes

cd build
cmake -DWITH_FRANCA_INTERFACE=ON -DCOMMONAPI_DBUS_TOOL_GENERATOR=<common-api-dbus-tools folder>/org.genivi.commonapi.dbus.cli.product/target/products/org.genivi.commonapi.dbus.cli.product/linux/gtk/x86/commonapi-dbus-generator-linux-x86 -DCOMMONAPI_TOOL_GENERATOR=<common-api-tools folder>/org.genivi.commonapi.core.cli.product/target/products/org.genivi.commonapi.core.cli.product/linux/gtk/x86/commonapi-generator-linux-x86 -DWITH_DEBUG=ON . ../
make 
cd ..
