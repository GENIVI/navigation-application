
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_fuel_stop_advisor_proxy_h__PROXY_MARSHAL_H
#define __dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_fuel_stop_advisor_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace demonstrator {

class FuelStopAdvisor_proxy
: public ::DBus::InterfaceProxy
{
public:

    FuelStopAdvisor_proxy()
    : ::DBus::InterfaceProxy("org.genivi.demonstrator.FuelStopAdvisor")
    {
        connect_signal(FuelStopAdvisor_proxy, TripDataResetted, _TripDataResetted_stub);
        connect_signal(FuelStopAdvisor_proxy, TripDataUpdated, _TripDataUpdated_stub);
        connect_signal(FuelStopAdvisor_proxy, FuelStopAdvisorWarning, _FuelStopAdvisorWarning_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    void SetUnits(const std::map< uint16_t, uint16_t >& data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << data;
        call.member("SetUnits");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< uint16_t, ::DBus::Variant > GetInstantData()
    {
        ::DBus::CallMessage call;
        call.member("GetInstantData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< uint16_t, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    uint8_t GetSupportedTripNumbers()
    {
        ::DBus::CallMessage call;
        call.member("GetSupportedTripNumbers");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    std::map< uint16_t, ::DBus::Variant > GetTripData(const uint8_t& number)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << number;
        call.member("GetTripData");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< uint16_t, ::DBus::Variant > argout;
        ri >> argout;
        return argout;
    }

    void ResetTripData(const uint8_t& number)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << number;
        call.member("ResetTripData");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetFuelAdvisorSettings(const bool& advisorMode, const uint8_t& distanceThreshold)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << advisorMode;
        wi << distanceThreshold;
        call.member("SetFuelAdvisorSettings");
        ::DBus::Message ret = invoke_method (call);
    }

    void GetFuelAdvisorSettings(bool& advisorMode, uint8_t& distanceThreshold, bool& destinationCantBeReached)
    {
        ::DBus::CallMessage call;
        call.member("GetFuelAdvisorSettings");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> advisorMode;
        ri >> distanceThreshold;
        ri >> destinationCantBeReached;
    }

    void SetRouteHandle(const uint32_t& routeHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << routeHandle;
        call.member("SetRouteHandle");
        ::DBus::Message ret = invoke_method (call);
    }

    void ReleaseRouteHandle(const uint32_t& routeHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << routeHandle;
        call.member("ReleaseRouteHandle");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void TripDataResetted(const uint8_t& number) = 0;
    virtual void TripDataUpdated(const uint8_t& number) = 0;
    virtual void FuelStopAdvisorWarning(const bool& destinationCantBeReached) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _TripDataResetted_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t number;
        ri >> number;
        TripDataResetted(number);
    }
    void _TripDataUpdated_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t number;
        ri >> number;
        TripDataUpdated(number);
    }
    void _FuelStopAdvisorWarning_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        bool destinationCantBeReached;
        ri >> destinationCantBeReached;
        FuelStopAdvisorWarning(destinationCantBeReached);
    }
};

} } } 
#endif //__dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_fuel_stop_advisor_proxy_h__PROXY_MARSHAL_H
