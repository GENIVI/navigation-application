
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_fifi_Bureau_genivi_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_proxy_h__PROXY_MARSHAL_H
#define __dbusxx___home_fifi_Bureau_genivi_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace navigationcore {

class MapMatchedPosition_proxy
: public ::DBus::InterfaceProxy
{
public:

    MapMatchedPosition_proxy()
    : ::DBus::InterfaceProxy("org.genivi.navigationcore.MapMatchedPosition")
    {
        connect_signal(MapMatchedPosition_proxy, SimulationStatusChanged, _SimulationStatusChanged_stub);
        connect_signal(MapMatchedPosition_proxy, SimulationSpeedChanged, _SimulationSpeedChanged_stub);
        connect_signal(MapMatchedPosition_proxy, PositionUpdate, _PositionUpdate_stub);
        connect_signal(MapMatchedPosition_proxy, AddressUpdate, _AddressUpdate_stub);
        connect_signal(MapMatchedPosition_proxy, PositionOnSegmentUpdate, _PositionOnSegmentUpdate_stub);
        connect_signal(MapMatchedPosition_proxy, StatusUpdate, _StatusUpdate_stub);
        connect_signal(MapMatchedPosition_proxy, OffRoadPositionChanged, _OffRoadPositionChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    void SetSimulationMode(const uint32_t& sessionHandle, const bool& activate)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        wi << activate;
        call.member("SetSimulationMode");
        ::DBus::Message ret = invoke_method (call);
    }

    int32_t GetSimulationStatus()
    {
        ::DBus::CallMessage call;
        call.member("GetSimulationStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        int32_t argout;
        ri >> argout;
        return argout;
    }

    void AddSimulationStatusListener()
    {
        ::DBus::CallMessage call;
        call.member("AddSimulationStatusListener");
        ::DBus::Message ret = invoke_method (call);
    }

    void RemoveSimulationStatusListener()
    {
        ::DBus::CallMessage call;
        call.member("RemoveSimulationStatusListener");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetSimulationSpeed(const uint32_t& sessionHandle, const uint8_t& speedFactor)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        wi << speedFactor;
        call.member("SetSimulationSpeed");
        ::DBus::Message ret = invoke_method (call);
    }

    uint8_t GetSimulationSpeed()
    {
        ::DBus::CallMessage call;
        call.member("GetSimulationSpeed");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        uint8_t argout;
        ri >> argout;
        return argout;
    }

    void AddSimulationSpeedListener()
    {
        ::DBus::CallMessage call;
        call.member("AddSimulationSpeedListener");
        ::DBus::Message ret = invoke_method (call);
    }

    void RemoveSimulationSpeedListener()
    {
        ::DBus::CallMessage call;
        call.member("RemoveSimulationSpeedListener");
        ::DBus::Message ret = invoke_method (call);
    }

    void StartSimulation(const uint32_t& sessionHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        call.member("StartSimulation");
        ::DBus::Message ret = invoke_method (call);
    }

    void PauseSimulation(const uint32_t& sessionHandle)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        call.member("PauseSimulation");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetPosition(const std::vector< int32_t >& valuesToReturn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << valuesToReturn;
        call.member("GetPosition");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout;
        ri >> argout;
        return argout;
    }

    void SetPosition(const uint32_t& sessionHandle, const std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > >& position)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << sessionHandle;
        wi << position;
        call.member("SetPosition");
        ::DBus::Message ret = invoke_method (call);
    }

    std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetAddress(const std::vector< int32_t >& valuesToReturn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << valuesToReturn;
        call.member("GetAddress");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout;
        ri >> argout;
        return argout;
    }

    std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetPositionOnSegment(const std::vector< int32_t >& valuesToReturn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << valuesToReturn;
        call.member("GetPositionOnSegment");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout;
        ri >> argout;
        return argout;
    }

    std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > GetStatus(const std::vector< int32_t >& valuesToReturn)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << valuesToReturn;
        call.member("GetStatus");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::map< int32_t, ::DBus::Struct< uint8_t, ::DBus::Variant > > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */
    virtual void SimulationStatusChanged(const int32_t& simulationStatus) = 0;
    virtual void SimulationSpeedChanged(const uint8_t& speedFactor) = 0;
    virtual void PositionUpdate(const std::vector< int32_t >& changedValues) = 0;
    virtual void AddressUpdate(const std::vector< int32_t >& changedValues) = 0;
    virtual void PositionOnSegmentUpdate(const std::vector< int32_t >& changedValues) = 0;
    virtual void StatusUpdate(const std::vector< int32_t >& changedValues) = 0;
    virtual void OffRoadPositionChanged(const uint32_t& distance, const int32_t& direction) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SimulationStatusChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t simulationStatus;
        ri >> simulationStatus;
        SimulationStatusChanged(simulationStatus);
    }
    void _SimulationSpeedChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t speedFactor;
        ri >> speedFactor;
        SimulationSpeedChanged(speedFactor);
    }
    void _PositionUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< int32_t > changedValues;
        ri >> changedValues;
        PositionUpdate(changedValues);
    }
    void _AddressUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< int32_t > changedValues;
        ri >> changedValues;
        AddressUpdate(changedValues);
    }
    void _PositionOnSegmentUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< int32_t > changedValues;
        ri >> changedValues;
        PositionOnSegmentUpdate(changedValues);
    }
    void _StatusUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::vector< int32_t > changedValues;
        ri >> changedValues;
        StatusUpdate(changedValues);
    }
    void _OffRoadPositionChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint32_t distance;
        ri >> distance;
        int32_t direction;
        ri >> direction;
        OffRoadPositionChanged(distance, direction);
    }
};

} } } 
#endif //__dbusxx___home_fifi_Bureau_genivi_navigation_src_navigation_build_dbus_include_navigation_core_genivi_navigationcore_mapmatchedposition_proxy_h__PROXY_MARSHAL_H
