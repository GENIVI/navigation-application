
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_amb_proxy_h__PROXY_MARSHAL_H
#define __dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_amb_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace automotive {

class Manager_proxy
: public ::DBus::InterfaceProxy
{
public:

    Manager_proxy()
    : ::DBus::InterfaceProxy("org.automotive.Manager")
    {
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    std::vector< ::DBus::Path > FindObject(const std::string& searchstring)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << searchstring;
        call.member("FindObject");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< ::DBus::Path > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path FindObjectForZone(const std::string& searchstring, const int32_t& zone)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << searchstring;
        wi << zone;
        call.member("FindObjectForZone");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Path FindObjectForSourceZone(const std::string& searchstring, const std::string& source, const int32_t& zone)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << searchstring;
        wi << source;
        wi << zone;
        call.member("FindObjectForSourceZone");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Path argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > List()
    {
        ::DBus::CallMessage call;
        call.member("List");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }

    std::vector< int32_t > ZonesForObjectName(const std::string& searchstring)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << searchstring;
        call.member("ZonesForObjectName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< int32_t > argout;
        ri >> argout;
        return argout;
    }

    std::vector< std::string > SourcesForObjectName(const std::string& searchstring)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << searchstring;
        call.member("SourcesForObjectName");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        std::vector< std::string > argout;
        ri >> argout;
        return argout;
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif //__dbusxx___home_psa_Desktop_genivi_navigation_application_master_src_build_fuel_stop_advisor_amb_proxy_h__PROXY_MARSHAL_H
