
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__enhanced_position_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__enhanced_position_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace genivi {
namespace positioning {

class EnhancedPosition_proxy
: public ::DBus::InterfaceProxy
{
public:

    EnhancedPosition_proxy()
    : ::DBus::InterfaceProxy("org.genivi.positioning.EnhancedPosition")
    {
        connect_signal(EnhancedPosition_proxy, PositionUpdate, _PositionUpdate_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > GetVersion()
    {
        ::DBus::CallMessage call;
        call.member("GetVersion");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< uint16_t, uint16_t, uint16_t, std::string > argout;
        ri >> argout;
        return argout;
    }

    void GetPositionInfo(const uint64_t& valuesToReturn, uint64_t& timestamp, std::map< uint64_t, ::DBus::Variant >& data)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << valuesToReturn;
        call.member("GetPositionInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> timestamp;
        ri >> data;
    }

    void GetSatelliteInfo(uint64_t& timestamp, std::vector< ::DBus::Struct< uint16_t, uint16_t, uint16_t, uint16_t, uint16_t, bool > >& satelliteInfo)
    {
        ::DBus::CallMessage call;
        call.member("GetSatelliteInfo");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> timestamp;
        ri >> satelliteInfo;
    }

    void GetTime(uint64_t& timestamp, std::map< uint64_t, ::DBus::Variant >& time)
    {
        ::DBus::CallMessage call;
        call.member("GetTime");
        ::DBus::Message ret = invoke_method (call);
        ::DBus::MessageIter ri = ret.reader();

        ri >> timestamp;
        ri >> time;
    }


public:

    /* signal handlers for this interface
     */
    virtual void PositionUpdate(const uint64_t& changedValues) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PositionUpdate_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint64_t changedValues;
        ri >> changedValues;
        PositionUpdate(changedValues);
    }
};

} } } 
#endif //__dbusxx__enhanced_position_proxy_h__PROXY_MARSHAL_H
